/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExpenseEvent
 */
export interface ExpenseEvent {
    /**
     * 
     * @type {string}
     * @memberof ExpenseEvent
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof ExpenseEvent
     */
    amount: number;
    /**
     * 
     * @type {Date}
     * @memberof ExpenseEvent
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof ExpenseEvent
     */
    expenseEventType: ExpenseEventExpenseEventTypeEnum;
}


/**
 * @export
 */
export const ExpenseEventExpenseEventTypeEnum = {
    OneOff: 'ONE_OFF',
    CalendarBased: 'CALENDAR_BASED',
    TimeBased: 'TIME_BASED'
} as const;
export type ExpenseEventExpenseEventTypeEnum = typeof ExpenseEventExpenseEventTypeEnum[keyof typeof ExpenseEventExpenseEventTypeEnum];


/**
 * Check if a given object implements the ExpenseEvent interface.
 */
export function instanceOfExpenseEvent(value: object): value is ExpenseEvent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('expenseEventType' in value) || value['expenseEventType'] === undefined) return false;
    return true;
}

export function ExpenseEventFromJSON(json: any): ExpenseEvent {
    return ExpenseEventFromJSONTyped(json, false);
}

export function ExpenseEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpenseEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'amount': json['amount'],
        'date': (new Date(json['date'])),
        'expenseEventType': json['expenseEventType'],
    };
}

export function ExpenseEventToJSON(json: any): ExpenseEvent {
    return ExpenseEventToJSONTyped(json, false);
}

export function ExpenseEventToJSONTyped(value?: ExpenseEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'amount': value['amount'],
        'date': ((value['date']).toISOString()),
        'expenseEventType': value['expenseEventType'],
    };
}

